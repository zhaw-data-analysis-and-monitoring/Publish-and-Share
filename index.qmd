---
title: "Collaboration, Sharing & Version Control"
author: "Nils Ratnaweera"
date: 22/04/2024
format: 
  revealjs:
    theme: dark
    logo: images/zhaw_sw_neg.png
    smaller: true
    css: style.css
    navigation-mode: vertical
    number-sections: true
    number-depth: 1
    center: true
    toc: true
    toc-depth: 1
lang: en-GB
bibliography: literatur.bib
suppress-bibliography: true # otherwise, a bibliography is appended
---

# Today{.unnumbered .unlisted}


## Goals

::: {.incremental}
- Know the advantages of *simple text documents    
- Know the basics of Markdown
- Know the basics of Quarto
- Quarto Advanced Features
- Collaboration
:::


# Literate Programming

## {data-background-image="images/pexels-anete-lusina-7256682.jpg"}

:::{.blockquote .font200}
When was the last time you spent a pleasant evening in a comfortable chair, reading a good R Script?
:::

:::{.blockquote .attribution}
-- Adapted from John Bentley (1986) "Communications of the ACM"
:::


## Donald Knuth 1984

![](images/knuth.jpg)

:::{.notes}

Literate programming is a programming paradigm introduced in 1984

:::

## Donald Knuth 1984



::::::{.columns}

::::: {.column width="40%"}
![](images/knuthweb.png)
:::::

::::: {.column width="60%"}

::::{.r-stack}

:::{.fragment .frade-in .fade-out}
> I’ve stumbled across a method of composing programs that excites me very much.
>
> In fact, my enthusiasm is so great that I must warn the reader to discount much of what I shall say as the ravings of a fanatic who thinks he has just seen a great light.

:::

:::{.fragment .frade-in-then-out}

> Let us change our traditional attitude to the construction of programs:
>
> *Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.*

:::

::::
:::::

::::::


:::{.notes}

- Donald Knuth invented this method for Programs. But we can replace the word "program" with R Script. 
- Check if the sound works (next up: video)

:::


## {data-background-video="video/knuth.mp4" data-background-size="contain"}


## Exercise 🛠️

*Make your R-Script literate*

1. Download the File `GOT.zip` from moodle (*Game of Thrones Dataset*)
2. Unzip the File in a reasonable location
3. Open the .RProj File with RStudio
4. Run the RScript got-1.R and try to undestand what is happening
5. Make the R-Script literate by 

   > explaining to human beings what we want a computer to do



:::{.notes}

Do this as well via sharing the screen

:::

# Markup and Markdown

:::{.notes}
- Using RComments to explain your code is great, but very limiting
- We cannot properly structure our comments: Highlight words, work with images, hyperlinks etc
- This is where Markup and markdown comes into play
:::

## What is a markup language?    

- Language for structuring texts
- Machine readable (use of tags / symbols)
- Clear separation of content and formatting
- *What you see is what you mean* (WYSIWYM)

::: {.notes}

Focus on what we want to write, not what it looks like. 

:::

## Some existing markup languages

Making a text **bold** in HTML, LaTex and Markdown:

| Langauge | Example                |
|----------|------------------------|
| HTML     | `<b>Hello World</b>`   |
| LaTeX    | `\textbf{Hello World}` |
| Markdown | `**Hello World**`      |

## What is Markdown?

- Lightweight markup language for easy text formatting
- Easy to learn 
- Machine readable *and* human readable

## Markdown Syntax

```{.markdown}
# A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg)
```

. . . 

<div style="height: 100px"></div>

### A story of a fox

The *quick* brown fox **jumps** over the lazy [dog](https://en.wikipedia.org/wiki/Dog).

![](images/fox-over-dog.jpg){width="400px"}

::: {.notes}
- [Markdown Basics](https://quarto.org/docs/authoring/markdown-basics.html)
- [Abbildungen](https://quarto.org/docs/authoring/figures.html)
- [Tabellen](https://quarto.org/docs/authoring/tables.html)
:::


# Quarto

## What is Quarto?

:::{.incremental}
- An open source *cli* tool
- Based on Markdown
  ![](images/rstudio-qmd-how-it-works2.png)
- Extends the standard Markdown language with useful elements (e.g. callout blocks)
- Integrates the integration of code (R, Python, Julia, SQL...)
:::

## Output formats

- `html`: Books, Slides, Blogs...
- `pdf`: Books, Slides
- `epub`: Books
- `word`: Books
- `pptx`: Slides


## Quarto Exercise 1 🛠️


1. Create a new text file (*File* → *New File* → *Text File*)
2. Save as `got-2.qmd`
3. Write some prose on the analysis done in `got1-R`
4. Render the file to html by clicking on the [⇨ Render]{.btn} -Button

Try out the option [🗹Render on Save]{.btn}




## Quarto Exercise 2 🛠️

:::{.incremental}

- Markdown talks to humans
- R Code talks to humans & the computer
- Let's add the R-Code from `got-1.R` with <kbd>Ctrl</kbd>+<kbd>Alt</kbd><kbd>I</kbd>
- This adds a "fence" where we can add R-Code
- Add the R-Code from `got-1.R` into the code block
- Check your updated preview
:::


## YAML Header


:::{.incremental}
- YAML: *YAML Ain't a Markup Language*
- A machine- and human-readable way of storing structured data
- An example:  
  ```{.yaml}
  title: Analysis of GOT Series
  author: Nils Ratnaweera
  ```
- In Quarto: Record metadata (e.g. title, author and date)
- Is inserted at the beginning of the document and enclosed with `---`
:::


## YAML Header Exercise 1 🛠️

- Add metadata to your markdown file using YAML headers
- Regard the output (`quarto preview`)

```{.yaml}
---
title: Analysis of GOT Series
author: Your Name
---
```

## YAML Header Exercise 2 🛠️


- Add a format specification to your YAML header: Either `typst` (recommended) or `pdf`
- This renders your file to pdf
- If you use `pdf`, you might need to install `tinytext` (see message in terminal)

```{.yaml}
---
title: Analysis of GOT Series
author: Nils Ratnaweera 
format: typst
---
```


## Exercise YAML Header 3 🛠️

```yaml
---
format: 
  pdf:            # pdf specific optons:
    toc: true     # - should a Table of Contents be published?
    toc-depth: 1  # - How many layers should be displayed in the TOC?
---
```

# Quarto Advanced



## Quarto Advanced Exercise 1 🛠️

- Insert one of the images included in your folder into your document
- ([quarto.org](https://quarto.org/docs/authoring/figures.html) → Guide → Authoring → Figures)

## Quarto Advanced Exercise 2 🛠️

- Insert an cross-reference to this image. E.G: *see @fig-baratheon-0*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) → Guide → Authoring → Scholarly Writing → Cross-References)


:::{}
![The coat of arms of House Baratheon from *A Song of Ice and Fire*](images/baratheon.png){#fig-baratheon-0 width="100px"}
:::


:::{.notes}
- For a cross-reference, the element to which you want to refer needs an ID
- This is set in {} and begins with #, for images # is followed by a fig. e.g:

  `![The coat of arms of the House of Baratheon...](images/baratheon.png){#fig-baratheon}`

- To refer to the image, use `@fig-baratheon`
::: 


## Quarto Advanced Exercise 3 🛠️ {#sec-uebung-quarto-featuers-2}

- Insert a crossreference to a chapter eg *see @sec-uebung-quarto-featuers-2*
- ([quarto.org](https://quarto.org/docs/authoring/cross-references.html) → Guide → Authoring → Scholarly Writing → Cross-References)


:::{.notes}

- Chapter references get a `{#sec-}`
- Chapters are (currently) only referenced with *numbers*
  - in the YAML header set: `number-sections: true`
  - See this open issue <https://github.com/quarto-dev/quarto-cli/issues/1196>

:::

## Quarto Advanced Exercise 4 🛠

- In Quarto, *figures* can consist of *subfigures*
- See: [quarto.org](https://quarto.org/docs/authoring/figures.html#subfigures) → Guide → Authoring → Figures → Subfigures
- Creates a subfigure layout similar to the following:

:::{#fig-houses layout-nrow="1"}

![House Baratheon](images/baratheon.png){#fig-barathon}

![House Baylish](images/baylish.png){#fig-baylish}

![House Arryn](images/arryn.png){#fig-arryn}

![House Bolton](images/bolton.png){#fig-bolton}


A collection of different coats of arms from the book ‘*A song of Ice and Fire*’, created by *dezzzart* published on [deviantart.com](https://www.deviantart.com/dezzzart)
:::


## Quarto Advanced Exercise 5 🛠

- Add a caption and a cross reference to your `ggplot`-figure


## Quarto Advanced Exercise 6 🛠

- Display a table with the top 10 characters in regard to screentime, displaying only the columns `name`, `screentime` and `episodes`.
- Reference this table in your text
- Add a caption to your table
- [quarto.org](https://quarto.org/docs/authoring/tables.html#cross-references) → Guide → Authoring → Tables → Cross References
- Hint: use `knitr::kable()`


## Quarto Advanced Exercise 7 🛠

- Add a (dummy) abstract
- Make sure this abstract is not numbered and not in the TOC
- [quarto.org](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents) → Guide → Documents → HTML → HTML Basics

## Quarto Advanced Exercise 8 🛠

Let's add a citation!

1. Got to [scholar.google.com](https://scholar.google.com/) 
2. Get the bibtex entry of a scientific paper
3. Create a new text file named `bibliography.bib`
4. Add the bibtex entry to this file
5. Include the file in the YAML header: `bibliography: bibliography.bib`
7. Now you can reference this entry using:
   - `@knuth1984` for *@knuth1984*
   - `see [@knuth1984]` for *see [@knuth1984]*

---  

- For more information see [quarto.org](https://quarto.org/docs/authoring/citations.html) → Guide → Authoring → Scholarly Writing → Citations
- To include Zotero, see [quarto.org](https://quarto.org/docs/visual-editor/technical.html#citations-from-zotero) → Guide → Tools → RStudio IDE → Visual Editor → Technical Writing → Citations → Citations from Zotero

:::{.notes}


content
:::

# Publishing HTML / Websites

## Publishing HTML Files

:::{.incremental}
- HTML can be shared publicly by creating a website
- Some options:
  - RPubs
  - QuartoPub
  - GitHub Pages
  - Netlify

:::

## Exercise Publish HTML with RPubs 🛠️

- Create a new account on [rpubs.com](https://rpubs.com/)
- Click on the Blue Publish Button on the Top right of your script
- Choose *RPubs*
- Click on Publish


# Collaboration

- To collaborate on coding projects, we recommend using Git with GitHub
- However, Git / GitHub has a very steep learning curve
- To collaborate on your projects, we recommend the following:
  1. Use a GDPR compatible cloud service (e.g. switchdrive)
  2. Use a cloud service that provides software for local syncing (e.g. switchdrive)
  3. Always work within an R Project (to set your working directory)
  4. Always use relative paths (never a path that starts with  `C:/`)



# Versioncontrol with Git and GitHub{#sec-git-github}

---

[Git and GitHub](Git-GitHub.html)


---


